{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to My Notes","text":"<p>This site is a collection of my personal notes on various topics, including software engineering, UML diagrams, and test automation. I use Obsidian to manage my notes and MkDocs to publish them as a static site on GitHub Pages.</p>"},{"location":"#explore-the-notes","title":"Explore the Notes","text":"<ul> <li>[[Methodology for Publishing Obsidian Notes with MkDocs and GitHub Pages]]</li> <li>UML Class Diagram - Library Resource Management System</li> </ul>"},{"location":"#about-this-site","title":"About This Site","text":"<p>This site is generated using MkDocs and automatically published via GitHub Pages. The notes are managed in Obsidian and synchronized using a custom script.</p>"},{"location":"#methodology","title":"Methodology","text":"<p>To learn more about how this site is built and published, visit the Methodology page.</p>"},{"location":"Methodology%20for%20Publishing%20Obsidian%20Notes%20with%20MkDocs%20and%20GitHub%20Pages/","title":"Methodology for Publishing Obsidian Notes with MkDocs and GitHub Pages","text":""},{"location":"Methodology%20for%20Publishing%20Obsidian%20Notes%20with%20MkDocs%20and%20GitHub%20Pages/#introduction","title":"Introduction","text":"<p>The goal of this system is to transform a personal collection of Markdown-based notes, managed within an Obsidian vault, into a publicly accessible static website hosted on GitHub Pages. This approach leverages Obsidian's powerful note-taking capabilities, MkDocs' static site generation features, and GitHub Pages' free hosting infrastructure to create a streamlined publication pipeline. The system is designed to be lightweight, maintainable, and tailored to individual use, while ensuring the notes remain organized and visually appealing online.</p>"},{"location":"Methodology%20for%20Publishing%20Obsidian%20Notes%20with%20MkDocs%20and%20GitHub%20Pages/#implemented-methodology","title":"Implemented Methodology","text":"<p>The current methodology relies on a combination of local file management, shell scripts, and Git-based deployment. Below is an exhaustive breakdown of each component and step involved:</p> <ul> <li>Obsidian Vault Setup:<ul> <li>Location: The vault resides at\u00a0/Users/rauros/Publish, a directory containing all Markdown (.md) files and associated assets (e.g., images in\u00a0.png,\u00a0.jpg, or\u00a0.gif\u00a0formats).</li> <li>Structure: Notes are organized into folders based on topics (e.g., \"Work\", \"Personal\", \"Projects\"), with a flat hierarchy to simplify file copying.</li> <li>Content: Each note is written in Markdown, adhering to standard syntax, with occasional use of Obsidian-specific features like\u00a0![[image]]\u00a0for embedded images (manually adjusted for MkDocs compatibility).</li> </ul> </li> <li>MkDocs Project Configuration:<ul> <li>Location: A separate directory at\u00a0/Users/rauros/Publish/mkdocs-site\u00a0serves as the MkDocs project root.</li> <li>Key Files:<ul> <li>mkdocs.yml: The configuration file specifying site metadata (e.g.,\u00a0site_name: My Notes), the theme (material), and navigation structure.</li> <li>docs/: A subdirectory where Markdown files and assets are copied from the vault for site generation.</li> <li>site/: The output directory where MkDocs generates the static HTML files.</li> </ul> </li> <li>Theme Customization: The \"Material for MkDocs\" theme is used, configured with a dark mode toggle, custom colors (e.g., primary color set to\u00a0indigo), and plugins like\u00a0search\u00a0for site-wide search functionality.</li> </ul> </li> <li>Automation Workflow:<ul> <li>Scripts Overview:<ul> <li>watch.sh: A simple shell script acting as the entry point for publication. It invokes\u00a0publish.sh\u00a0once, rather than running in a continuous loop, to avoid unnecessary resource usage.</li> <li>publish.sh: The core script handling the end-to-end publication process.</li> </ul> </li> <li>Detailed Steps in\u00a0publish.sh:<ol> <li>File Synchronization:<ul> <li>Command:\u00a0cp -r /Users/rauros/Publish/*.md /Users/rauros/Publish/mkdocs-site/docs/</li> <li>Command:\u00a0cp -r /Users/rauros/Publish/images/* /Users/rauros/Publish/mkdocs-site/docs/images/</li> <li>Copies all\u00a0.md\u00a0files and the\u00a0images/\u00a0folder to the\u00a0docs/\u00a0directory, overwriting existing files to ensure the latest versions are used.</li> </ul> </li> <li>Site Generation:<ul> <li>Command:\u00a0mkdocs build --clean</li> <li>Runs MkDocs to generate a fresh static site in the\u00a0site/\u00a0directory, clearing any previous build artifacts.</li> </ul> </li> <li>Git Operations:<ul> <li>cd /Users/rauros/Publish/mkdocs-site</li> <li>git add .: Stages all changes in the MkDocs project directory.</li> <li>git commit -m \"Update site with latest notes\": Commits the changes with a descriptive message.</li> <li>git push origin main: Pushes the updates to the\u00a0main\u00a0branch of the\u00a0rauros.github.io\u00a0repository.</li> </ul> </li> </ol> </li> <li>Execution: The user manually runs\u00a0watch.sh\u00a0from the terminal (e.g.,\u00a0bash watch.sh), triggering the entire process.</li> </ul> </li> <li>GitHub Pages Deployment:<ul> <li>Repository:\u00a0rauros.github.io, a public GitHub repository configured to serve content from the\u00a0main\u00a0branch.</li> <li>Hosting: GitHub Pages automatically detects the static files in the\u00a0site/\u00a0directory and deploys them to\u00a0https://rauros.github.io.</li> </ul> </li> </ul> <p>Technical Nuances:</p> <ul> <li>File Paths: Absolute paths are used in scripts for reliability, assuming a fixed local setup.</li> <li>MkDocs Plugins: The\u00a0mkdocs-material\u00a0plugin enables features like instant page loading and code highlighting.</li> <li>Error Handling: Basic error checking (e.g., verifying directory existence) is minimal, relying on manual troubleshooting if issues arise.</li> </ul>"},{"location":"Methodology%20for%20Publishing%20Obsidian%20Notes%20with%20MkDocs%20and%20GitHub%20Pages/#methodologies-not-implemented","title":"Methodologies Not Implemented","text":"<p>Several alternative approaches were evaluated but ultimately not adopted. Below is a detailed exploration of each, including why they were rejected:</p> <ol> <li>Obsidian Git Plugin:<ul> <li>Description: This plugin integrates Git directly into Obsidian, enabling automatic commits and pushes of vault changes to a repository.</li> <li>Implementation Details:<ul> <li>Requires installing the plugin via Obsidian\u2019s community plugin marketplace.</li> <li>Configures a Git repository within the vault directory (/Users/rauros/Publish).</li> <li>Supports scheduling commits (e.g., every 5 minutes) and pushing to a remote like GitHub.</li> </ul> </li> <li>Reasons for Not Implementing:<ul> <li>Redundancy: The vault would need its own repository separate from\u00a0rauros.github.io, complicating synchronization with the MkDocs site.</li> <li>Control: Automatic commits could push incomplete notes, requiring additional configuration (e.g.,\u00a0.gitignore\u00a0for drafts).</li> <li>Learning Curve: Setting up SSH keys or Git credentials within Obsidian adds complexity for a simple use case.</li> </ul> </li> </ul> </li> <li>GitHub Actions Workflow:<ul> <li>Description: A CI/CD pipeline using GitHub Actions to automate site building and deployment directly from the vault\u2019s repository.</li> <li>Implementation Details:<ul> <li>Create a\u00a0.github/workflows/publish.yml\u00a0file in a vault repository.</li> <li>Define steps: checkout vault code, install MkDocs, copy files, build the site, and deploy to GitHub Pages.</li> <li>Trigger on push events to the vault repository.</li> </ul> </li> <li>Reasons for Not Implementing:<ul> <li>Dependency Overhead: Requires maintaining Python and MkDocs in the cloud, plus managing GitHub secrets for authentication.</li> <li>Loss of Local Control: Moves the process to a remote server, reducing visibility into build failures.</li> <li>Setup Complexity: Writing and debugging YAML workflows demands more effort than local scripts.</li> </ul> </li> </ul> </li> <li>Continuous Integration Tools (e.g., Jenkins, Travis CI):<ul> <li>Description: Enterprise-grade CI tools to monitor the vault, build the site, and deploy it automatically.</li> <li>Implementation Details:<ul> <li>Install Jenkins locally or on a server.</li> <li>Configure a job to watch\u00a0/Users/rauros/Publish, run MkDocs, and push to GitHub.</li> <li>Use webhooks or polling to detect changes.</li> </ul> </li> <li>Reasons for Not Implementing:<ul> <li>Overkill: These tools are designed for large teams and complex projects, not a single-user notes site.</li> <li>Resource Intensive: Running a CI server locally consumes significant CPU and memory.</li> <li>Maintenance: Requires ongoing updates and configuration, outweighing the benefits for this scope.</li> </ul> </li> </ul> </li> <li>Custom Python Script with Watchdog:<ul> <li>Description: A Python script using the\u00a0watchdog\u00a0library to monitor the vault for changes and trigger publication automatically.</li> <li>Implementation Details:<ul> <li>Install\u00a0watchdog\u00a0via\u00a0pip install watchdog.</li> <li>Write a script to detect file modifications, copy files, and run\u00a0mkdocs build.</li> <li>Integrate with Git for commits and pushes.</li> </ul> </li> <li>Reasons for Not Implementing:<ul> <li>Development Time: Building and testing a custom solution takes longer than adapting existing shell scripts.</li> <li>Reliability: File system watchers can miss events or trigger excessively, requiring debouncing logic.</li> <li>Dependency: Adds Python as a dependency, whereas the current setup only needs bash and Git.</li> </ul> </li> </ul> </li> </ol>"},{"location":"Methodology%20for%20Publishing%20Obsidian%20Notes%20with%20MkDocs%20and%20GitHub%20Pages/#pros-and-cons-of-the-current-methodology","title":"Pros and Cons of the Current Methodology","text":"<p>The implemented approach has distinct strengths and weaknesses, analyzed in depth below:</p> <p>Pros:</p> <ul> <li>Simplicity:<ul> <li>Uses basic shell commands (cp,\u00a0git) and MkDocs, requiring minimal setup beyond initial configuration.</li> <li>Easy to understand and modify without advanced programming knowledge.</li> </ul> </li> <li>Local Control:<ul> <li>All operations run on the user\u2019s machine, allowing immediate feedback and manual intervention if needed.</li> <li>No reliance on external servers or internet connectivity during the build phase.</li> </ul> </li> <li>Flexibility:<ul> <li>The process can be adapted to include new file types or directories by tweaking\u00a0publish.sh.</li> <li>Works with any GitHub Pages-compatible static site generator, not just MkDocs.</li> </ul> </li> <li>Low Overhead:<ul> <li>No additional software beyond Obsidian, MkDocs, Git, and a terminal, keeping the system lightweight.</li> </ul> </li> <li>Cost-Free:<ul> <li>Leverages free tools and GitHub\u2019s hosting, avoiding subscription or server costs.</li> </ul> </li> </ul> <p>Cons:</p> <ul> <li>Manual Execution:<ul> <li>Requires running\u00a0watch.sh\u00a0manually, lacking true automation (e.g., no real-time change detection).</li> <li>Could be mitigated by scheduling via\u00a0cron, but this isn\u2019t currently implemented.</li> </ul> </li> <li>Scalability Limits:<ul> <li>Copying all files every time (cp -r) becomes inefficient as the vault grows (e.g., hundreds of notes or large image folders).</li> <li>No incremental updates\u2014each build regenerates the entire site.</li> </ul> </li> <li>Error Susceptibility:<ul> <li>No robust error handling in scripts; a failed\u00a0git push\u00a0(e.g., due to network issues) halts the process silently.</li> <li>Misaligned file paths or permissions could break the workflow without clear diagnostics.</li> </ul> </li> <li>Platform Dependency:<ul> <li>Scripts are written for Unix-like systems (e.g., macOS, Linux), requiring adaptation for Windows (e.g., using WSL or rewriting in PowerShell).</li> </ul> </li> <li>No Preview:<ul> <li>Changes are pushed directly to the live site without a local preview step, risking publication of errors or unfinished notes.</li> </ul> </li> </ul>"},{"location":"Methodology%20for%20Publishing%20Obsidian%20Notes%20with%20MkDocs%20and%20GitHub%20Pages/#detailed-flowchart-description","title":"Detailed Flowchart Description","text":"<p>To provide a more illustrative representation, the following is a detailed textual description of the publication process, suitable for generating an image with tools like PlantUML or Draw.io:</p> <ul> <li>Start: The process begins when the user decides to publish updated notes.</li> <li>Edit Notes: The user modifies Markdown files or adds images in the Obsidian vault (/Users/rauros/Publish).</li> <li>Run Trigger: The user executes\u00a0watch.sh\u00a0from the terminal.</li> <li>Invoke Publish Script:\u00a0watch.sh\u00a0calls\u00a0publish.sh.</li> <li>File Copy Stage:<ul> <li>Copy Markdown: All\u00a0.md\u00a0files are copied to\u00a0/Users/rauros/Publish/mkdocs-site/docs/.</li> <li>Copy Assets: The\u00a0images/\u00a0folder is copied to\u00a0/Users/rauros/Publish/mkdocs-site/docs/images/.</li> </ul> </li> <li>Site Build: MkDocs runs\u00a0mkdocs build --clean, generating the static site in\u00a0site/.</li> <li>Git Workflow:<ul> <li>Stage Changes:\u00a0git add .\u00a0captures all updates in the MkDocs directory.</li> <li>Commit:\u00a0git commit -m \"Update site\"\u00a0records the changes.</li> <li>Push:\u00a0git push origin main\u00a0sends the updates to GitHub.</li> </ul> </li> <li>Deployment: GitHub Pages detects the new commit and updates\u00a0https://rauros.github.io.</li> <li>End: The process completes, and the site reflects the latest notes ![[Flowchart Description.png]]</li> </ul>"},{"location":"Methodology%20for%20Publishing%20Obsidian%20Notes%20with%20MkDocs%20and%20GitHub%20Pages/#conclusion","title":"Conclusion","text":"<p>This methodology provides a practical, low-friction way to publish Obsidian notes online, balancing ease of use with functional output. While it sacrifices some automation and scalability for simplicity, it effectively meets the needs of a personal notes site. Alternative methodologies were considered but dismissed due to complexity or misalignment with project goals. The flowchart can be rendered as an image for a clearer, more illustrative depiction of the process.</p>"},{"location":"UML-Class-Diagram-Library-Resource-Management-System/","title":"UML Class Diagram Library Resource Management System","text":"<p>Author: Antonio Ortiz Date: 25/04/2025 Degree: Computer Engineering  Subject: Software Engineering Assignment: Activity 1 \u2013 Process Model &amp; Class Design  </p>"},{"location":"UML-Class-Diagram-Library-Resource-Management-System/#context","title":"\ud83e\udde0 Context","text":"<p>This assignment involved the analysis of functional requirements for a university library system and the modeling of its core components using UML class diagrams. The design includes resources (spaces and books), users (students and teachers), and the different types of reservations possible in the system.</p>"},{"location":"UML-Class-Diagram-Library-Resource-Management-System/#uml-class-diagram","title":"\ud83d\uddbc UML Class Diagram","text":"<p>The following UML class diagram represents the designed structure of the library reservation system.</p> <p></p>"},{"location":"UML-Class-Diagram-Library-Resource-Management-System/#class-descriptions","title":"\ud83e\udde9 Class Descriptions","text":"Class Description <code>Space</code> General class representing a physical resource in the library. <code>ReadingSeat</code> Subclass of <code>Space</code>. <code>StudyRoom</code> Subclass of <code>Space</code>. <code>User</code> General class representing any individual who interacts with the library. <code>Student</code> Subclass of <code>User</code>, with the attribute <code>degree : string</code>. <code>Teacher</code> Subclass of <code>User</code>, with the attribute <code>department : string</code>. <code>Book</code> Represents a library book, with attributes <code>fecha : Date</code> and <code>soloLecturaSala : Boolean</code>. Indicates whether the book is restricted to in-room reading only. <code>SpaceReservation</code> Represents the reservation of a space (seat or room) by a user, with attribute <code>Date</code>. <code>RoomReservation</code> Subclass of <code>SpaceReservation</code>, used for study rooms. <code>SeatReservation</code> Subclass of <code>SpaceReservation</code>, used for reading seats. <code>BookReservation</code> Represents a book reservation, with attribute <code>RoomOnly : Boolean</code>. Indicates if a room reservation is required to allow the book reservation."},{"location":"UML-Class-Diagram-Library-Resource-Management-System/#class-hierarchies-generalization","title":"\ud83d\udd17 Class Hierarchies (Generalization)","text":"Generalization Description <code>User</code> &lt;&gt; <code>Student</code> <code>Student</code> is a subclass of <code>User</code>. <code>User</code> &lt;&gt; <code>Teacher</code> <code>Teacher</code> is a subclass of <code>User</code>. <code>Space</code> &lt;&gt; <code>StudyRoom</code> <code>StudyRoom</code> is a subclass of <code>Space</code>. <code>Space</code> &lt;&gt; <code>ReadingSeat</code> <code>ReadingSeat</code> is a subclass of <code>Space</code>. <code>SpaceReservation</code> &lt;&gt; <code>RoomReservation</code> <code>RoomReservation</code> is a subclass of <code>SpaceReservation</code>. <code>SpaceReservation</code> &lt;&gt; <code>SeatReservation</code> <code>SeatReservation</code> is a subclass of <code>SpaceReservation</code>."},{"location":"UML-Class-Diagram-Library-Resource-Management-System/#class-associations","title":"\ud83d\udd17 Class Associations","text":"Association Description <code>Student</code> &lt;&gt; <code>RoomReservation</code> Students can create room reservations. <code>Teacher</code> &lt;&gt; <code>RoomReservation</code> Teachers can create room reservations. <code>User</code> &lt;&gt; <code>SeatReservation</code> Users can reserve reading seats. <code>User</code> &lt;&gt; <code>BookReservation</code> Users can reserve books. <code>SeatReservation</code> &lt;&gt; <code>ReadingSeat</code> Each seat reservation is linked to a specific reading seat. <code>RoomReservation</code> &lt;&gt; <code>StudyRoom</code> Each room reservation is linked to a specific study room. <code>BookReservation</code> &lt;&gt; <code>Book</code> Each book reservation is linked to a specific book. <code>BookReservation</code> &lt;&gt; <code>SeatReservation</code> Book reservations validate the presence of an active seat reservation to allow access to the requested book."},{"location":"UML-Class-Diagram-Library-Resource-Management-System/#summary","title":"\u2705 Summary","text":"<p>This UML class diagram captures a simplified model for a university library resource booking system. It applies object-oriented design principles such as generalization and composition and supports potential rule extension based on user type or resource restrictions.</p>"}]}